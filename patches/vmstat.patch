Only in .: .gdbinit
diff -ru /usr/src/usr.bin/vmstat/Makefile ./Makefile
--- /usr/src/usr.bin/vmstat/Makefile	2014-01-16 15:36:09.000000000 -0500
+++ ./Makefile	2014-09-05 15:07:01.000000000 -0400
@@ -3,8 +3,9 @@
 
 PROG=	vmstat
 MAN=	vmstat.8
-DPADD=	${LIBDEVSTAT} ${LIBKVM} ${LIBMEMSTAT} ${LIBUTIL}
-LDADD=	-ldevstat -lkvm -lmemstat -lutil
+DPADD=	${LIBDEVSTAT} ${LIBKVM} ${LIBMEMSTAT} ${LIBUTIL} ${LIBXO}
+LDADD=	-ldevstat -lkvm -lmemstat -lutil -lxo
+CFLAGS = ${CARGS}
 
 WARNS?=	1
 
Only in .: Makefile~
Only in .: vmstat
Only in .: vmstat.8.gz
diff -ru /usr/src/usr.bin/vmstat/vmstat.c ./vmstat.c
--- /usr/src/usr.bin/vmstat/vmstat.c	2014-01-16 15:36:09.000000000 -0500
+++ ./vmstat.c	2014-09-05 15:33:43.000000000 -0400
@@ -75,6 +75,7 @@
 #include <time.h>
 #include <unistd.h>
 #include <libutil.h>
+#include <libxo/xo.h>
 
 static char da[] = "da";
 
@@ -181,6 +182,11 @@
 	interval = reps = todo = 0;
 	maxshowdevs = 2;
 	hflag = isatty(1);
+
+	argc = xo_parse_args(argc, argv);
+	if (argc < 0)
+	    return argc;
+
 	while ((c = getopt(argc, argv, "ac:fhHiM:mN:n:Pp:stw:z")) != -1) {
 		switch (c) {
 		case 'a':
@@ -217,12 +223,12 @@
 			nflag = 1;
 			maxshowdevs = atoi(optarg);
 			if (maxshowdevs < 0)
-				errx(1, "number of devices %d is < 0",
+				xo_errx(1, "number of devices %d is < 0",
 				     maxshowdevs);
 			break;
 		case 'p':
 			if (devstat_buildmatch(optarg, &matches, &num_matches) != 0)
-				errx(1, "%s", devstat_errbuf);
+				xo_errx(1, "%s", devstat_errbuf);
 			break;
 		case 's':
 			todo |= SUMSTAT;
@@ -231,7 +237,7 @@
 #ifdef notyet
 			todo |= TIMESTAT;
 #else
-			errx(EX_USAGE, "sorry, -t is not (re)implemented yet");
+			xo_errx(EX_USAGE, "sorry, -t is not (re)implemented yet");
 #endif
 			break;
 		case 'w':
@@ -256,25 +262,41 @@
 	if (memf != NULL) {
 		kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf);
 		if (kd == NULL)
-			errx(1, "kvm_openfiles: %s", errbuf);
+			xo_errx(1, "kvm_openfiles: %s", errbuf);
 	}
 
 	if (kd != NULL && (c = kvm_nlist(kd, namelist)) != 0) {
 		if (c > 0) {
-			warnx("undefined symbols:");
+			int bufsiz = 0, len;
+			char *buf, *bp;
+
 			for (c = 0;
 			     c < (int)(sizeof(namelist)/sizeof(namelist[0]));
 			     c++)
 				if (namelist[c].n_type == 0)
-					(void)fprintf(stderr, " %s",
+					    bufsiz += strlen(namelist[c].n_name) + 1;
+			bufsiz += len + 1;
+			buf = bp = alloca(bufsiz);
+
+			for (c = 0;
+			     c < (int)(sizeof(namelist)/sizeof(namelist[0]));
+			     c++)
+				if (namelist[c].n_type == 0) {
+					xo_error(" %s",
 					    namelist[c].n_name);
-			(void)fputc('\n', stderr);
+					len = strlen(namelist[c].n_name);
+					*bp++ = ' ';
+					memcpy(bp, namelist[c].n_name, len);
+					bp += len;
+				}
+			*bp = '\0';
+			xo_error("undefined symbols:%s\n", buf);
 		} else
-			warnx("kvm_nlist: %s", kvm_geterr(kd));
+			xo_warnx("kvm_nlist: %s", kvm_geterr(kd));
 		exit(1);
 	}
 	if (kd && Pflag)
-		errx(1, "Cannot use -P with crash dumps");
+		xo_errx(1, "Cannot use -P with crash dumps");
 
 	if (todo & VMSTAT) {
 		/*
@@ -283,7 +305,7 @@
 		 * message informing the user of his mistake.
 		 */
 		if (devstat_checkversion(NULL) < 0)
-			errx(1, "%s", devstat_errbuf);
+			xo_errx(1, "%s", devstat_errbuf);
 
 
 		argv = getdrivedata(argv);
@@ -332,7 +354,7 @@
 
 	error = sysctlbyname(name, oldp, oldlenp, newp, newlen);
 	if (error != 0 && errno != ENOMEM)
-		err(1, "sysctl(%s)", name);
+		xo_err(1, "sysctl(%s)", name);
 	return (error);
 }
 
@@ -340,13 +362,13 @@
 getdrivedata(char **argv)
 {
 	if ((num_devices = devstat_getnumdevs(NULL)) < 0)
-		errx(1, "%s", devstat_errbuf);
+		xo_errx(1, "%s", devstat_errbuf);
 
 	cur.dinfo = (struct devinfo *)calloc(1, sizeof(struct devinfo));
 	last.dinfo = (struct devinfo *)calloc(1, sizeof(struct devinfo));
 
 	if (devstat_getdevs(NULL, &cur) == -1)
-		errx(1, "%s", devstat_errbuf);
+		xo_errx(1, "%s", devstat_errbuf);
 
 	num_devices = cur.dinfo->numdevs;
 	generation = cur.dinfo->generation;
@@ -378,7 +400,7 @@
 	 */
 	if ((num_devices_specified == 0) && (num_matches == 0)) {
 		if (devstat_buildmatch(da, &matches, &num_matches) != 0)
-			errx(1, "%s", devstat_errbuf);
+			xo_errx(1, "%s", devstat_errbuf);
 
 		select_mode = DS_SELECT_ADD;
 	} else
@@ -394,7 +416,7 @@
 		       num_devices, matches, num_matches, specified_devices,
 		       num_devices_specified, select_mode,
 		       maxshowdevs, 0) == -1)
-		errx(1, "%s", devstat_errbuf);
+		xo_errx(1, "%s", devstat_errbuf);
 
 	return(argv);
 }
@@ -423,16 +445,16 @@
 
 	maxcpu = kvm_getmaxcpu(kd);
 	if (maxcpu < 0)
-		errx(1, "kvm_getmaxcpu: %s", kvm_geterr(kd));
+		xo_errx(1, "kvm_getmaxcpu: %s", kvm_geterr(kd));
 
 	pcpu = calloc(maxcpu, sizeof(struct pcpu *));
 	if (pcpu == NULL)
-		err(1, "calloc");
+		xo_err(1, "calloc");
 
 	for (i = 0; i < maxcpu; i++) {
 		pcpu[i] = kvm_getpcpu(kd, i);
 		if (pcpu[i] == (struct pcpu *)-1)
-			errx(1, "kvm_getpcpu: %s", kvm_geterr(kd));
+			xo_errx(1, "kvm_getpcpu: %s", kvm_geterr(kd));
 	}
 
 	*maxcpup = maxcpu;
@@ -562,12 +584,12 @@
 {
 	if (kd != NULL) {
 		/* XXX fill vmtp */
-		errx(1, "not implemented");
+		xo_errx(1, "not implemented");
 	} else {
 		size_t size = sizeof(*vmtp);
 		mysysctl("vm.vmtotal", vmtp, &size, NULL, 0);
 		if (size != sizeof(*vmtp))
-			errx(1, "vm.total size mismatch");
+			xo_errx(1, "vm.total size mismatch");
 	}
 }
 
@@ -585,17 +607,17 @@
 	u_long mask;
 
 	if (kd != NULL)
-		errx(1, "not implemented");
+		xo_errx(1, "not implemented");
 	mask = 0;
 	ncpus = 0;
 	size = sizeof(maxcpu);
 	mysysctl("kern.smp.maxcpus", &maxcpu, &size, NULL, 0);
 	if (size != sizeof(maxcpu))
-		errx(1, "sysctl kern.smp.maxcpus");
+		xo_errx(1, "sysctl kern.smp.maxcpus");
 	size = sizeof(long) * maxcpu * CPUSTATES;
 	times = malloc(size);
 	if (times == NULL)
-		err(1, "malloc %zd bytes", size);
+		xo_err(1, "malloc %zd bytes", size);
 	mysysctl("kern.cp_times", times, &size, NULL, 0);
 	maxid = (size / CPUSTATES / sizeof(long)) - 1;
 	for (i = 0; i <= maxid; i++) {
@@ -618,16 +640,20 @@
 
 
 static void
-prthuman(u_int64_t val, int size)
+prthuman(const char *name, u_int64_t val, int size)
 {
 	char buf[10];
 	int flags;
+	char fmt[128];
+
+	snprintf(fmt, sizeof(fmt), "{:%s/%%*s}", name);
 
 	if (size < 5 || size > 9)
-		errx(1, "doofus");
+		xo_errx(1, "doofus");
 	flags = HN_B | HN_NOSPACE | HN_DECIMAL;
 	humanize_number(buf, size, val, "", HN_AUTOSCALE, flags);
-	printf("%*s", size, buf);
+	xo_attr("value", "%ju", (uintmax_t) val);
+	xo_emit(fmt, size, buf);
 }
 
 static int hz, hdrcnt;
@@ -683,7 +709,7 @@
 		size = sizeof(clockrate);
 		mysysctl("kern.clockrate", &clockrate, &size, NULL, 0);
 		if (size != sizeof(clockrate))
-			errx(1, "clockrate size mismatch");
+			xo_errx(1, "clockrate size mismatch");
 		hz = clockrate.hz;
 	}
 
@@ -698,18 +724,18 @@
 			printhdr(ncpus, cpumask);
 		if (kd != NULL) {
 			if (kvm_getcptime(kd, cur.cp_time) < 0)
-				errx(1, "kvm_getcptime: %s", kvm_geterr(kd));
+				xo_errx(1, "kvm_getcptime: %s", kvm_geterr(kd));
 		} else {
 			size = sizeof(cur.cp_time);
 			mysysctl("kern.cp_time", &cur.cp_time, &size, NULL, 0);
 			if (size != sizeof(cur.cp_time))
-				errx(1, "cp_time size mismatch");
+				xo_errx(1, "cp_time size mismatch");
 		}
 		if (Pflag) {
 			size = size_cp_times;
 			mysysctl("kern.cp_times", cur_cp_times, &size, NULL, 0);
 			if (size != size_cp_times)
-				errx(1, "cp_times mismatch");
+				xo_errx(1, "cp_times mismatch");
 		}
 
 		tmp_dinfo = last.dinfo;
@@ -726,7 +752,7 @@
 		 */
 		switch (devstat_getdevs(NULL, &cur)) {
 		case -1:
-			errx(1, "%s", devstat_errbuf);
+			xo_errx(1, "%s", devstat_errbuf);
 			break;
 		case 1: {
 			int retval;
@@ -743,7 +769,7 @@
 					    maxshowdevs, 0);
 			switch (retval) {
 			case -1:
-				errx(1, "%s", devstat_errbuf);
+				xo_errx(1, "%s", devstat_errbuf);
 				break;
 			case 1:
 				printhdr(ncpus, cpumask);
@@ -758,45 +784,65 @@
 
 		fill_vmmeter(&sum);
 		fill_vmtotal(&total);
-		(void)printf("%2d %1d %1d",
+		xo_open_container("processes");
+		xo_emit("{:runnable/%2d} {:waiting/%1d} "
+			"{:swapped-out/%1d}",
 		    total.t_rq - 1, total.t_dw + total.t_pw, total.t_sw);
 #define vmstat_pgtok(a) ((a) * (sum.v_page_size >> 10))
 #define	rate(x)	(((x) * rate_adj + halfuptime) / uptime)	/* round */
+		xo_close_container("processes");
+
+		xo_open_container("memory");
 		if (hflag) {
-			printf(" ");
-			prthuman(total.t_avm * (u_int64_t)sum.v_page_size, 7);
-			printf(" ");
-			prthuman(total.t_free * (u_int64_t)sum.v_page_size, 6);
-			printf(" ");
+			xo_emit(" ");
+			prthuman("available-memory",
+				 total.t_avm * (u_int64_t)sum.v_page_size, 7);
+			xo_emit(" ");
+			prthuman("free-memory",
+				 total.t_free * (u_int64_t)sum.v_page_size, 6);
+			xo_emit(" ");
 		} else {
-			printf(" %7d ", vmstat_pgtok(total.t_avm));
-			printf(" %6d ", vmstat_pgtok(total.t_free));
+			xo_emit(" {:available-memory/%7d} ",
+				vmstat_pgtok(total.t_avm));
+			xo_emit(" {:free-memory/%6d} ",
+				vmstat_pgtok(total.t_free));
 		}
-		(void)printf("%5lu ",
+		xo_close_container("memory");
+
+		xo_open_container("paging-rates");
+		xo_emit("{:total-page-faults/%5lu} ",
 		    (unsigned long)rate(sum.v_vm_faults - osum.v_vm_faults));
-		(void)printf("%3lu ",
+		xo_emit("{:page-reactivated/%3lu} ",
 		    (unsigned long)rate(sum.v_reactivated - osum.v_reactivated));
-		(void)printf("%3lu ",
+		xo_emit("{:paged-in/%3lu} ",
 		    (unsigned long)rate(sum.v_swapin + sum.v_vnodein -
 		    (osum.v_swapin + osum.v_vnodein)));
-		(void)printf("%3lu ",
+		xo_emit("{:paged-out/%3lu} ",
 		    (unsigned long)rate(sum.v_swapout + sum.v_vnodeout -
 		    (osum.v_swapout + osum.v_vnodeout)));
-		(void)printf("%5lu ",
+		xo_emit("{:freed/%5lu} ",
 		    (unsigned long)rate(sum.v_tfree - osum.v_tfree));
-		(void)printf("%3lu ",
+		xo_emit("{:scanned/%3lu} ",
 		    (unsigned long)rate(sum.v_pdpages - osum.v_pdpages));
+		xo_close_container("paging-rates");
+
 		devstats();
-		(void)printf("%4lu %4lu %4lu",
+		xo_open_container("fault-rates");
+		xo_emit("{:interrupts/%4lu} {:system-calls/%4lu} "
+			"{:context-switches/%4lu}",
 		    (unsigned long)rate(sum.v_intr - osum.v_intr),
 		    (unsigned long)rate(sum.v_syscall - osum.v_syscall),
 		    (unsigned long)rate(sum.v_swtch - osum.v_swtch));
+		xo_close_container("fault-rates");
+
+		xo_open_container("cpu-statistics");
 		if (Pflag)
 			pcpustats(ncpus, cpumask, maxid);
 		else
 			cpustats();
-		(void)printf("\n");
-		(void)fflush(stdout);
+		xo_close_container("cpu-statistics");
+		xo_emit("\n");
+		xo_flush();
 		if (reps >= 0 && --reps <= 0)
 			break;
 		osum = sum;
@@ -820,34 +866,35 @@
 	int i, num_shown;
 
 	num_shown = (num_selected < maxshowdevs) ? num_selected : maxshowdevs;
-	(void)printf(" procs      memory      page%*s", 19, "");
+	xo_emit(" {T:procs}      {T:memory}      {T:/page%*s}", 19, "");
 	if (num_shown > 1)
-		(void)printf(" disks %*s", num_shown * 4 - 7, "");
+		xo_emit(" {T:/disks %*s}", num_shown * 4 - 7, "");
 	else if (num_shown == 1)
-		(void)printf("disk");
-	(void)printf("   faults         ");
+		xo_emit("{T:disk}");
+	xo_emit("   {T:faults}         ");
 	if (Pflag) {
 		for (i = 0; i < ncpus; i++) {
 			if (cpumask & (1ul << i))
-				printf("cpu%-2d    ", i);
+				xo_emit("{T:/cpu%-2d}    ", i);
 		}
-		printf("\n");
+		xo_emit("\n");
 	} else
-		printf("cpu\n");
-	(void)printf(" r b w     avm    fre   flt  re  pi  po    fr  sr ");
+		xo_emit("{T:cpu}\n");
+	xo_emit(" {T:r} {T:b} {T:w}     {T:avm}    {T:fre}   {T:flt}  "
+		"{T:re}  {T:pi}  {T:po}    {T:fr}  {T:sr} ");
 	for (i = 0; i < num_devices; i++)
 		if ((dev_select[i].selected)
 		 && (dev_select[i].selected <= maxshowdevs))
-			(void)printf("%c%c%d ", dev_select[i].device_name[0],
+			xo_emit("{T:/%c%c%d} ", dev_select[i].device_name[0],
 				     dev_select[i].device_name[1],
 				     dev_select[i].unit_number);
-	(void)printf("  in   sy   cs");
+	xo_emit("  {T:in}   {T:sy}   {T:cs}");
 	if (Pflag) {
 		for (i = 0; i < ncpus; i++)
-			printf(" us sy id");
-		printf("\n");
+			xo_emit(" {T:us} {T:sy} {T:id}");
+		xo_emit("\n");
 	} else
-		printf(" us sy id\n");
+		xo_emit(" {T:us} {T:sy} {T:id}\n");
 	if (wresized != 0)
 		doresize();
 	hdrcnt = winlines;
@@ -890,7 +937,7 @@
 		if (status == -1 && errno == EINTR)
 			continue;
 		else if (status == -1)
-			err(1, "ioctl");
+			xo_err(1, "ioctl");
 		if (w.ws_row > 3)
 			winlines = w.ws_row - 3;
 		else
@@ -913,13 +960,16 @@
 	kread(X_REC, &rectime, sizeof(rectime));
 	kread(X_PGIN, &pgintime, sizeof(pgintime));
 	kread(X_SUM, &sum, sizeof(sum));
-	(void)printf("%u reclaims, %u total time (usec)\n",
+	xo_emit("{:page-reclaims/%u} {N:reclaims}, "
+		"{:reclaim-time/%u} {N:total time (usec)}\n",
 	    sum.v_pgrec, rectime);
-	(void)printf("average: %u usec / reclaim\n", rectime / sum.v_pgrec);
-	(void)printf("\n");
-	(void)printf("%u page ins, %u total time (msec)\n",
+	xo_emit("{L:average}: {:reclaim-average/%u} {N:usec \\/ reclaim}\n",
+		rectime / sum.v_pgrec);
+	xo_emit("\n");
+	xo_emit("{:page-ins/%u} {N:page ins}, "
+		"{:page-in-time/%u} {N:total time (msec)}\n",
 	    sum.v_pgin, pgintime / 10);
-	(void)printf("average: %8.1f msec / page in\n",
+	xo_emit("{L:average}: {:average/%8.1f} {N:msec \\/ page in}\n",
 	    pgintime / (sum.v_pgin * 10.0));
 }
 #endif
@@ -944,65 +994,108 @@
 	long nchtotal;
 
 	fill_vmmeter(&sum);
-	(void)printf("%9u cpu context switches\n", sum.v_swtch);
-	(void)printf("%9u device interrupts\n", sum.v_intr);
-	(void)printf("%9u software interrupts\n", sum.v_soft);
-	(void)printf("%9u traps\n", sum.v_trap);
-	(void)printf("%9u system calls\n", sum.v_syscall);
-	(void)printf("%9u kernel threads created\n", sum.v_kthreads);
-	(void)printf("%9u  fork() calls\n", sum.v_forks);
-	(void)printf("%9u vfork() calls\n", sum.v_vforks);
-	(void)printf("%9u rfork() calls\n", sum.v_rforks);
-	(void)printf("%9u swap pager pageins\n", sum.v_swapin);
-	(void)printf("%9u swap pager pages paged in\n", sum.v_swappgsin);
-	(void)printf("%9u swap pager pageouts\n", sum.v_swapout);
-	(void)printf("%9u swap pager pages paged out\n", sum.v_swappgsout);
-	(void)printf("%9u vnode pager pageins\n", sum.v_vnodein);
-	(void)printf("%9u vnode pager pages paged in\n", sum.v_vnodepgsin);
-	(void)printf("%9u vnode pager pageouts\n", sum.v_vnodeout);
-	(void)printf("%9u vnode pager pages paged out\n", sum.v_vnodepgsout);
-	(void)printf("%9u page daemon wakeups\n", sum.v_pdwakeups);
-	(void)printf("%9u pages examined by the page daemon\n", sum.v_pdpages);
-	(void)printf("%9u pages reactivated\n", sum.v_reactivated);
-	(void)printf("%9u copy-on-write faults\n", sum.v_cow_faults);
-	(void)printf("%9u copy-on-write optimized faults\n", sum.v_cow_optim);
-	(void)printf("%9u zero fill pages zeroed\n", sum.v_zfod);
-	(void)printf("%9u zero fill pages prezeroed\n", sum.v_ozfod);
-	(void)printf("%9u intransit blocking page faults\n", sum.v_intrans);
-	(void)printf("%9u total VM faults taken\n", sum.v_vm_faults);
-	(void)printf("%9u page faults requiring I/O\n", sum.v_io_faults);
-	(void)printf("%9u pages affected by kernel thread creation\n", sum.v_kthreadpages);
-	(void)printf("%9u pages affected by  fork()\n", sum.v_forkpages);
-	(void)printf("%9u pages affected by vfork()\n", sum.v_vforkpages);
-	(void)printf("%9u pages affected by rfork()\n", sum.v_rforkpages);
-	(void)printf("%9u pages cached\n", sum.v_tcached);
-	(void)printf("%9u pages freed\n", sum.v_tfree);
-	(void)printf("%9u pages freed by daemon\n", sum.v_dfree);
-	(void)printf("%9u pages freed by exiting processes\n", sum.v_pfree);
-	(void)printf("%9u pages active\n", sum.v_active_count);
-	(void)printf("%9u pages inactive\n", sum.v_inactive_count);
-	(void)printf("%9u pages in VM cache\n", sum.v_cache_count);
-	(void)printf("%9u pages wired down\n", sum.v_wire_count);
-	(void)printf("%9u pages free\n", sum.v_free_count);
-	(void)printf("%9u bytes per page\n", sum.v_page_size);
+	xo_emit("{:context-switches/%9u} {N:cpu context switches}\n",
+		sum.v_swtch);
+	xo_emit("{:interrupts/%9u} {N:device interrupts}\n",
+		sum.v_intr);
+	xo_emit("{:software-interrupts/%9u} {N:software interrupts}\n",
+		sum.v_soft);
+	xo_emit("{:traps/%9u} {N:traps}\n", sum.v_trap);
+	xo_emit("{:system-calls/%9u} {N:system calls}\n",
+		sum.v_syscall);
+	xo_emit("{:kernel-threads/%9u} {N:kernel threads created}\n",
+		sum.v_kthreads);
+	xo_emit("{:forks/%9u} {N: fork() calls}\n", sum.v_forks);
+	xo_emit("{:vforks/%9u} {N:vfork() calls}\n",
+		sum.v_vforks);
+	xo_emit("{:rforks/%9u} {N:rfork() calls}\n",
+		sum.v_rforks);
+	xo_emit("{:swap-ins/%9u} {N:swap pager pageins}\n",
+		sum.v_swapin);
+	xo_emit("{:swap-in-pages/%9u} {N:swap pager pages paged in}\n",
+		sum.v_swappgsin);
+	xo_emit("{:swap-outs/%9u} {N:swap pager pageouts}\n",
+		sum.v_swapout);
+	xo_emit("{:swap-out-pages/%9u} {N:swap pager pages paged out}\n",
+		sum.v_swappgsout);
+	xo_emit("{:vnode-page-ins/%9u} {N:vnode pager pageins}\n",
+		sum.v_vnodein);
+	xo_emit("{:vnode-page-in-pages/%9u} {N:vnode pager pages paged in}\n",
+		sum.v_vnodepgsin);
+	xo_emit("{:vnode-page-outs/%9u} {N:vnode pager pageouts}\n",
+		sum.v_vnodeout);
+	xo_emit("{:vnode-page-outs/%9u} {N:vnode pager pages paged out}\n",
+		sum.v_vnodepgsout);
+	xo_emit("{:page-daemon-wakeups/%9u} {N:page daemon wakeups}\n",
+		sum.v_pdwakeups);
+	xo_emit("{:page-daemon-pages/%9u} {N:pages examined by the page daemon}\n",
+		sum.v_pdpages);
+	xo_emit("{:reactivated/%9u} {N:pages reactivated}\n",
+		sum.v_reactivated);
+	xo_emit("{:copy-on-write-faults/%9u} {N:copy-on-write faults}\n",
+		sum.v_cow_faults);
+	xo_emit("{:copy-on-write-optimized-faults/%9u} {N:copy-on-write optimized faults}\n",
+		sum.v_cow_optim);
+	xo_emit("{:zero-fill-pages/%9u} {N:zero fill pages zeroed}\n",
+		sum.v_zfod);
+	xo_emit("{:zero-fill-prezeroed/%9u} {N:zero fill pages prezeroed}\n",
+		sum.v_ozfod);
+	xo_emit("{:intransit-blocking/%9u} {N:intransit blocking page faults}\n",
+		sum.v_intrans);
+	xo_emit("{:total-faults/%9u} {N:total VM faults taken}\n",
+		sum.v_vm_faults);
+	xo_emit("{:faults-requiring-io/%9u} {N:page faults requiring I\\/O}\n",
+		sum.v_io_faults);
+	xo_emit("{:faults-from-thread-creation/%9u} {N:pages affected by kernel thread creation}\n",
+		sum.v_kthreadpages);
+	xo_emit("{:faults-from-fork/%9u} {N:pages affected by  fork}()\n",
+		sum.v_forkpages);
+	xo_emit("{:faults-from-vfork/%9u} {N:pages affected by vfork}()\n",
+		sum.v_vforkpages);
+	xo_emit("{:pages-rfork/%9u} {N:pages affected by rfork}()\n",
+		sum.v_rforkpages);
+	xo_emit("{:pages-total-cached/%9u} {N:pages cached}\n",
+		sum.v_tcached);
+	xo_emit("{:pages-freed/%9u} {N:pages freed}\n",
+		sum.v_tfree);
+	xo_emit("{:pages-freed-by-daemon/%9u} {N:pages freed by daemon}\n",
+		sum.v_dfree);
+	xo_emit("{:pages-freed-on-exit/%9u} {N:pages freed by exiting processes}\n",
+		sum.v_pfree);
+	xo_emit("{:active-pages/%9u} {N:pages active}\n",
+		sum.v_active_count);
+	xo_emit("{:inactive-pages/%9u} {N:pages inactive}\n",
+		sum.v_inactive_count);
+	xo_emit("{:vm-cache/%9u} {N:pages in VM cache}\n",
+		sum.v_cache_count);
+	xo_emit("{:wired-pages/%9u} {N:pages wired down}\n",
+		sum.v_wire_count);
+	xo_emit("{:free-pages/%9u} {N:pages free}\n",
+		sum.v_free_count);
+	xo_emit("{:bytes-per-page/%9u} {N:bytes per page}\n", sum.v_page_size);
 	if (kd != NULL) {
 		kread(X_NCHSTATS, &lnchstats, sizeof(lnchstats));
 	} else {
 		size_t size = sizeof(lnchstats);
 		mysysctl("vfs.cache.nchstats", &lnchstats, &size, NULL, 0);
 		if (size != sizeof(lnchstats))
-			errx(1, "vfs.cache.nchstats size mismatch");
+			xo_errx(1, "vfs.cache.nchstats size mismatch");
 	}
 	nchtotal = lnchstats.ncs_goodhits + lnchstats.ncs_neghits +
 	    lnchstats.ncs_badhits + lnchstats.ncs_falsehits +
 	    lnchstats.ncs_miss + lnchstats.ncs_long;
-	(void)printf("%9ld total name lookups\n", nchtotal);
-	(void)printf(
-	    "%9s cache hits (%ld%% pos + %ld%% neg) system %ld%% per-directory\n",
+	xo_emit("{:total-name-lookups/%9ld} {N:total name lookups}\n",
+		nchtotal);
+	xo_emit("{P:/%9s} {N:cache hits} "
+		"({:positive-cache-hits/%ld}% pos + "
+		"{:negative-cache-hits/%ld}% {N:neg}) "
+		"system {:cache-hit-percent/%ld}% per-directory\n",
 	    "", PCT(lnchstats.ncs_goodhits, nchtotal),
 	    PCT(lnchstats.ncs_neghits, nchtotal),
 	    PCT(lnchstats.ncs_pass2, nchtotal));
-	(void)printf("%9s deletions %ld%%, falsehits %ld%%, toolong %ld%%\n", "",
+	xo_emit("{P:/%9s} {L:deletions} {:deletions/%ld}%, "
+		"{L:falsehits} {:false-hits/%ld}%, "
+		"{L:toolong} {:too-long/%ld}%\n", "",
 	    PCT(lnchstats.ncs_badhits, nchtotal),
 	    PCT(lnchstats.ncs_falsehits, nchtotal),
 	    PCT(lnchstats.ncs_long, nchtotal));
@@ -1012,18 +1105,23 @@
 doforkst(void)
 {
 	fill_vmmeter(&sum);
-	(void)printf("%u forks, %u pages, average %.2f\n",
+	xo_open_container("fork-statistics");
+	xo_emit("{:fork/%u} {N:forks}, {:fork-pages/%u} {N:pages}, "
+		"{L:average} {:fork-average/%.2f}\n",
 	    sum.v_forks, sum.v_forkpages,
 	    sum.v_forks == 0 ? 0.0 :
 	    (double)sum.v_forkpages / sum.v_forks);
-	(void)printf("%u vforks, %u pages, average %.2f\n",
+	xo_emit("{:vfork/%u} {N:vforks}, {:vfork-pages/%u} {N:pages}, "
+		"{L:average} {:vfork-average/%.2f}\n",
 	    sum.v_vforks, sum.v_vforkpages,
 	    sum.v_vforks == 0 ? 0.0 :
 	    (double)sum.v_vforkpages / sum.v_vforks);
-	(void)printf("%u rforks, %u pages, average %.2f\n",
+	xo_emit("{:rfork/%u} {N:rforks}, {:rfork-pages/%u} {N:pages}, "
+		"{L:average} {:rfork-average/%.2f}\n",
 	    sum.v_rforks, sum.v_rforkpages,
 	    sum.v_rforks == 0 ? 0.0 :
 	    (double)sum.v_rforkpages / sum.v_rforks);
+	xo_close_container("fork-statistics");
 }
 
 static void
@@ -1042,6 +1140,7 @@
 
 	busy_seconds = cur.snap_time - last.snap_time;
 
+	xo_open_list("device");
 	for (dn = 0; dn < num_devices; dn++) {
 		int di;
 
@@ -1055,24 +1154,33 @@
 		    &last.dinfo->devices[di], busy_seconds,
 		    DSM_TRANSFERS_PER_SECOND, &transfers_per_second,
 		    DSM_NONE) != 0)
-			errx(1, "%s", devstat_errbuf);
+			xo_errx(1, "%s", devstat_errbuf);
 
-		(void)printf("%3.0Lf ", transfers_per_second);
+		xo_open_instance("device");
+		xo_emit("{ek:name/%c%c%d}{:transfers/%3.0Lf} ",
+			dev_select[dn].device_name[0],
+			dev_select[dn].device_name[1],
+			dev_select[dn].unit_number,
+			transfers_per_second);
+		xo_open_instance("device");
 	}
+	xo_close_list("device");
 }
 
 static void
-percent(double pct, int *over)
+percent(const char *name, double pct, int *over)
 {
 	char buf[10];
+	char fmt[128];
 	int l;
 
+	snprintf(fmt, sizeof(fmt), " {:%s/%%*s}", name);
 	l = snprintf(buf, sizeof(buf), "%.0f", pct);
 	if (l == 1 && *over) {
-		printf("%s",  buf);
+		xo_emit(fmt, 1, buf);
 		(*over)--;
 	} else
-		printf("%2s", buf);
+		xo_emit(fmt, 2, buf);
 	if (l > 2)
 		(*over)++;
 }
@@ -1091,12 +1199,11 @@
 	else
 		lpct = 0.0;
 	over = 0;
-	printf(" ");
-	percent((cur.cp_time[CP_USER] + cur.cp_time[CP_NICE]) * lpct, &over);
-	printf(" ");
-	percent((cur.cp_time[CP_SYS] + cur.cp_time[CP_INTR]) * lpct, &over);
-	printf(" ");
-	percent(cur.cp_time[CP_IDLE] * lpct, &over);
+	xo_open_container("cpu-statistics");
+	percent("user", (cur.cp_time[CP_USER] + cur.cp_time[CP_NICE]) * lpct, &over);
+	percent("system", (cur.cp_time[CP_SYS] + cur.cp_time[CP_INTR]) * lpct, &over);
+	percent("idle", cur.cp_time[CP_IDLE] * lpct, &over);
+	xo_close_container("cpu-statistics");
 }
 
 static void
@@ -1119,9 +1226,12 @@
 	}
 
 	over = 0;
+	xo_open_list("cpu");
 	for (i = 0; i <= maxid; i++) {
 		if ((cpumask & (1ul << i)) == 0)
 			continue;
+		xo_open_instance("cpu");
+		xo_emit("{ke:name/%d}", i);
 		total = 0;
 		for (state = 0; state < CPUSTATES; ++state)
 			total += cur_cp_times[i * CPUSTATES + state];
@@ -1129,15 +1239,15 @@
 			lpct = 100.0 / total;
 		else
 			lpct = 0.0;
-		printf(" ");
-		percent((cur_cp_times[i * CPUSTATES + CP_USER] +
+		percent("user", (cur_cp_times[i * CPUSTATES + CP_USER] +
 			 cur_cp_times[i * CPUSTATES + CP_NICE]) * lpct, &over);
-		printf(" ");
-		percent((cur_cp_times[i * CPUSTATES + CP_SYS] +
+		percent("system", (cur_cp_times[i * CPUSTATES + CP_SYS] +
 			 cur_cp_times[i * CPUSTATES + CP_INTR]) * lpct, &over);
-		printf(" ");
-		percent(cur_cp_times[i * CPUSTATES + CP_IDLE] * lpct, &over);
+		percent("idle", cur_cp_times[i * CPUSTATES + CP_IDLE] * lpct,
+			&over);
+		xo_close_instance("cpu");
 	}
+	xo_close_list("cpu");
 }
 
 static void
@@ -1155,20 +1265,20 @@
 		kread(X_SINTRNAMES, &inamlen, sizeof(inamlen));
 		if ((intrcnt = malloc(intrcntlen)) == NULL ||
 		    (intrname = malloc(inamlen)) == NULL)
-			err(1, "malloc()");
+			xo_err(1, "malloc()");
 		kread(X_INTRCNT, intrcnt, intrcntlen);
 		kread(X_INTRNAMES, intrname, inamlen);
 	} else {
 		for (intrcnt = NULL, intrcntlen = 1024; ; intrcntlen *= 2) {
 			if ((intrcnt = reallocf(intrcnt, intrcntlen)) == NULL)
-				err(1, "reallocf()");
+				xo_err(1, "reallocf()");
 			if (mysysctl("hw.intrcnt",
 			    intrcnt, &intrcntlen, NULL, 0) == 0)
 				break;
 		}
 		for (intrname = NULL, inamlen = 1024; ; inamlen *= 2) {
 			if ((intrname = reallocf(intrname, inamlen)) == NULL)
-				err(1, "reallocf()");
+				xo_err(1, "reallocf()");
 			if (mysysctl("hw.intrnames",
 			    intrname, &inamlen, NULL, 0) == 0)
 				break;
@@ -1183,18 +1293,25 @@
 			istrnamlen = clen;
 		tintrname += clen + 1;
 	}
-	(void)printf("%-*s %20s %10s\n", (int)istrnamlen, "interrupt", "total",
-	    "rate");
+	xo_emit("{T:/%-*s} {T:/%20s} {T:/%10s}\n",
+		(int)istrnamlen, "interrupt", "total", "rate");
 	inttotal = 0;
+	xo_open_list("interrupt");
 	for (i = 0; i < nintr; i++) {
-		if (intrname[0] != '\0' && (*intrcnt != 0 || aflag))
-			(void)printf("%-*s %20lu %10lu\n", (int)istrnamlen,
-			    intrname, *intrcnt, *intrcnt / uptime);
+		if (intrname[0] != '\0' && (*intrcnt != 0 || aflag)) {
+			xo_open_instance("interrupt");
+			xo_emit("{k:name/%-*s} {:total/%20lu} {:rate/%10lu}\n",
+				(int)istrnamlen,
+				intrname, *intrcnt, *intrcnt / uptime);
+			xo_close_instance("interrupt");
+		}
 		intrname += strlen(intrname) + 1;
 		inttotal += *intrcnt++;
 	}
-	(void)printf("%-*s %20" PRIu64 " %10" PRIu64 "\n", (int)istrnamlen,
-	    "Total", inttotal, inttotal / uptime);
+	xo_close_list("interrupt");
+	xo_emit("{L:/%-*s} {:total-interrupts/%20" PRIu64 "} "
+		"{:total-rate/%10" PRIu64 "}\n", (int)istrnamlen,
+		"Total", inttotal, inttotal / uptime);
 }
 
 static void
@@ -1206,12 +1323,12 @@
 
 	mtlp = memstat_mtl_alloc();
 	if (mtlp == NULL) {
-		warn("memstat_mtl_alloc");
+		xo_warn("memstat_mtl_alloc");
 		return;
 	}
 	if (kd == NULL) {
 		if (memstat_sysctl_malloc(mtlp, 0) < 0) {
-			warnx("memstat_sysctl_malloc: %s",
+			xo_warnx("memstat_sysctl_malloc: %s",
 			    memstat_strerror(memstat_mtl_geterror(mtlp)));
 			return;
 		}
@@ -1219,35 +1336,43 @@
 		if (memstat_kvm_malloc(mtlp, kd) < 0) {
 			error = memstat_mtl_geterror(mtlp);
 			if (error == MEMSTAT_ERROR_KVM)
-				warnx("memstat_kvm_malloc: %s",
+				xo_warnx("memstat_kvm_malloc: %s",
 				    kvm_geterr(kd));
 			else
-				warnx("memstat_kvm_malloc: %s",
+				xo_warnx("memstat_kvm_malloc: %s",
 				    memstat_strerror(error));
 		}
 	}
-	printf("%13s %5s %6s %7s %8s  Size(s)\n", "Type", "InUse", "MemUse",
-	    "HighUse", "Requests");
+	xo_emit("{T:/%13s} {T:/%5s} {T:/%6s} {T:/%7s} {T:/%8s}  {T:Size(s)}\n",
+		"Type", "InUse", "MemUse", "HighUse", "Requests");
+	xo_open_list("memory");
 	for (mtp = memstat_mtl_first(mtlp); mtp != NULL;
 	    mtp = memstat_mtl_next(mtp)) {
 		if (memstat_get_numallocs(mtp) == 0 &&
 		    memstat_get_count(mtp) == 0)
 			continue;
-		printf("%13s %5" PRIu64 " %5" PRIu64 "K %7s %8" PRIu64 "  ",
+		xo_open_instance("memory");
+		xo_emit("{k:type/%13s} {:in-use/%5" PRIu64 "/} "
+			"{:memory-use/%5" PRIu64 "}{U:K} {:high-use/%7s} "
+			"{:requests/%8" PRIu64 "}  ",
 		    memstat_get_name(mtp), memstat_get_count(mtp),
 		    (memstat_get_bytes(mtp) + 1023) / 1024, "-",
 		    memstat_get_numallocs(mtp));
 		first = 1;
+		xo_open_list("size");
 		for (i = 0; i < 32; i++) {
 			if (memstat_get_sizemask(mtp) & (1 << i)) {
 				if (!first)
-					printf(",");
-				printf("%d", 1 << (i + 4));
+					xo_emit(",");
+				xo_emit("{l:size/%d}", 1 << (i + 4));
 				first = 0;
 			}
 		}
-		printf("\n");
+		xo_close_list("size");
+		xo_close_instance("memory");
+		xo_emit("\n");
 	}
+	xo_close_list("memory");
 	memstat_mtl_free(mtlp);
 }
 
@@ -1261,12 +1386,12 @@
 
 	mtlp = memstat_mtl_alloc();
 	if (mtlp == NULL) {
-		warn("memstat_mtl_alloc");
+		xo_warn("memstat_mtl_alloc");
 		return;
 	}
 	if (kd == NULL) {
 		if (memstat_sysctl_uma(mtlp, 0) < 0) {
-			warnx("memstat_sysctl_uma: %s",
+			xo_warnx("memstat_sysctl_uma: %s",
 			    memstat_strerror(memstat_mtl_geterror(mtlp)));
 			return;
 		}
@@ -1274,28 +1399,35 @@
 		if (memstat_kvm_uma(mtlp, kd) < 0) {
 			error = memstat_mtl_geterror(mtlp);
 			if (error == MEMSTAT_ERROR_KVM)
-				warnx("memstat_kvm_uma: %s",
+				xo_warnx("memstat_kvm_uma: %s",
 				    kvm_geterr(kd));
 			else
-				warnx("memstat_kvm_uma: %s",
+				xo_warnx("memstat_kvm_uma: %s",
 				    memstat_strerror(error));
 		}
 	}
-	printf("%-20s %6s %6s %8s %8s %8s %4s %4s\n\n", "ITEM", "SIZE",
-	    "LIMIT", "USED", "FREE", "REQ", "FAIL", "SLEEP");
+	xo_emit("{T:/%-20s} {T:/%6s} {T:/%6s} {T:/%8s} {T:/%8s} {T:/%8s} "
+		"{T:/%4s} {T:/%4s}\n\n", "ITEM", "SIZE",
+		"LIMIT", "USED", "FREE", "REQ", "FAIL", "SLEEP");
+	xo_open_list("zone");
 	for (mtp = memstat_mtl_first(mtlp); mtp != NULL;
 	    mtp = memstat_mtl_next(mtp)) {
 		strlcpy(name, memstat_get_name(mtp), MEMTYPE_MAXNAME);
 		strcat(name, ":");
-		printf("%-20s %6" PRIu64 ", %6" PRIu64 ",%8" PRIu64 ",%8" PRIu64
-		    ",%8" PRIu64 ",%4" PRIu64 ",%4" PRIu64 "\n", name,
-		    memstat_get_size(mtp), memstat_get_countlimit(mtp),
-		    memstat_get_count(mtp), memstat_get_free(mtp),
-		    memstat_get_numallocs(mtp), memstat_get_failures(mtp),
-		    memstat_get_sleeps(mtp));
+		xo_open_instance("zone");
+		xo_emit("{k:name/%-20s} {:size/%6" PRIu64 "}, "
+			"{:limit/%6" PRIu64 "},{:used/%8" PRIu64 "},"
+			"{:free/%8" PRIu64 "},{:requests/%8" PRIu64 "},"
+			"{:fail/%4" PRIu64 "},{:sleep/%4" PRIu64 "}\n", name,
+			memstat_get_size(mtp), memstat_get_countlimit(mtp),
+			memstat_get_count(mtp), memstat_get_free(mtp),
+			memstat_get_numallocs(mtp), memstat_get_failures(mtp),
+			memstat_get_sleeps(mtp));
+		xo_close_instance("zone");
 	}
 	memstat_mtl_free(mtlp);
-	printf("\n");
+	xo_close_list("zone");
+	xo_emit("\n");
 }
 
 /*
@@ -1310,14 +1442,14 @@
 		sym = namelist[nlx].n_name;
 		if (*sym == '_')
 			++sym;
-		errx(1, "symbol %s not defined", sym);
+		xo_errx(1, "symbol %s not defined", sym);
 	}
 	if ((size_t)kvm_read(kd, namelist[nlx].n_value + offset, addr,
 	    size) != size) {
 		sym = namelist[nlx].n_name;
 		if (*sym == '_')
 			++sym;
-		errx(1, "%s: %s", sym, kvm_geterr(kd));
+		xo_errx(1, "%s: %s", sym, kvm_geterr(kd));
 	}
 }
 
@@ -1337,11 +1469,11 @@
 		if (size == n + 1) {
 			ret = realloc(ret, size);
 			if (ret == NULL)
-				err(1, "%s: realloc", __func__);
+				xo_err(1, "%s: realloc", __func__);
 			size *= 2;
 		}
 		if (kvm_read(kd, (u_long)strp + n, &ret[n], 1) != 1)
-			errx(1, "%s: %s", __func__, kvm_geterr(kd));
+			xo_errx(1, "%s: %s", __func__, kvm_geterr(kd));
 	} while (ret[n++] != '\0');
 	return (ret);
 }
@@ -1349,7 +1481,7 @@
 static void
 usage(void)
 {
-	(void)fprintf(stderr, "%s%s",
+	xo_error("%s%s",
 		"usage: vmstat [-afHhimPsz] [-c count] [-M core [-N system]] [-w wait]\n",
 		"              [-n devs] [-p type,if,pass] [disks]\n");
 	exit(1);
Only in .: vmstat.core
Only in .: vmstat.c~
Only in .: vmstat.o
