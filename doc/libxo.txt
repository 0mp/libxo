#
# Copyright (c) 2014, Juniper Networks, Inc.
# All rights reserved.
# This SOFTWARE is licensed under the LICENSE provided in the
# ../Copyright file. By downloading, installing, copying, or 
# using the SOFTWARE, you agree to be bound by the terms of that
# LICENSE.
# Phil Shafer, July 2014
#

* libxo

libxo - A Library for Generating Text, XML, JSON, and HTML Output

The libxo library allows an application to generate text, XML, JSON,
and HTML output using a common set of function calls.  The application
decides at run time which output style should be produced.  The
application calls a function "xo_emit" to product output that is
described in a format string.  A "field descriptor" tells libxo what
the field is and what it means.

    xo_emit(" {:lines/%7ju/%ju} {:words/%7ju/%ju} "
            "{:characters/%7ju/%ju}{d:filename/%s}\n",
            linect, wordct, charct, file);

Output can then be generated in various style, using the "--libxo"
option: 

    % wc /etc/motd
          25     165    1140 /etc/motd
    % wc --libxo xml,pretty,warn /etc/motd
    <wc>
      <file>
        <filename>/etc/motd</filename>
        <lines>25</lines>
        <words>165</words>
        <characters>1140</characters>
      </file>
    </wc>
    % wc --libxo json,pretty,warn /etc/motd
    {
      "wc": {
        "file": [
          {
            "filename": "/etc/motd",
            "lines": 25,
            "words": 165,
            "characters": 1140
          }
        ]
      }
    }
    % wc --libxo html,pretty,warn /etc/motd
    <div class="line">
      <div class="text"> </div>
      <div class="data" data-tag="lines">     25</div>
      <div class="text"> </div>
      <div class="data" data-tag="words">    165</div>
      <div class="text"> </div>
      <div class="data" data-tag="characters">   1140</div>
      <div class="text"> </div>
      <div class="data" data-tag="filename">/etc/motd</div>
    </div>

* Overview

Most unix commands emit text output aimed at humans.  It is designed
to be parsed and understood by a user.  Humans are gifted at extracted
details and pattern matching.  Often programmers need to extract
information from this human-oriented output.  Programmers use tools
like grep, awk, and regular expressions to ferret out the pieces of
information they need.  Such solutions are fragile and require
updates when output contents change or evolve, requiring testing and
validation.

Modern tool developers favors encoding schemes like XML and JSON,
which allow trivial parsing and extraction of data.  Such formats are
simple, well understood, hierarchical, easily parsed, and often
integrate easier with common tools and environments.

In addition, modern reality means that more output ends up in web
browsers than in terminals, making HTML output valuable.

libxo allows a single set of function calls in source code to generate
traditional text output, as well as XML and JSON formatted data.  HTML
can also be generated; "<div>" elements surround the traditional text
output, with attributes that detail how to render the data.

A single libxo function call in source code is all that's required:

    xo_emit("Connecting to {:host}.{:domain}...\n", host, domain);

    Text:
      Connection to my-box.example.com...
    XML:
      <host>my-box</host>
      <domain>example.com</domain>
    JSON:
      "host": my-box",
      "domain": "example.com"
      
For brevity, the HTML output is emitted.

** Encoding Styles

There are four encoding styles supported by libxo: TEXT, HTML, JSON,
and XML.  JSON and XML are suitable for encoding data, while TEXT and
HTML are suited for display to the user.  TEXT output can be display
on a terminal session, allowing compatibility with traditional usage.
HTML can be matched with a small CSS file to permit rendering in any
HTML5 browser.  XML output is suitable for tools like XPath and
protocols like NETCONF.  JSON output can be used for RESTful APIs.

*** Text Output

Most traditional programs generate text output on standard output,
with contents like:

    36      ./src
    40      ./bin
    90      .

In this example (taken from du source code), the code to generate this
data might look like:

    printf("%d\t%s\n", num_blocks, path);

Simple, direct, obvious.  But it's only making text output.  Imagine
using a single code path to make text, XML, JSON or HTML, deciding at
run time which to generate.

libxo expands on the idea of printf format strings to make a single
format containing instructions for creating multiple output styles:

    xo_emit("{:blocks/%d}\t{:path/%s}\n", num_blocks, path);

This line will generate the same text output as the earlier printf
call, but also has enough information to generate XML, JSON, and HTML.

The following sections introduce the other formats.

*** XML Output

XML output consists of a hierarchical set of elements, each encoded
with a start tag and an end tag.  The element should be named for data
value that it is encoding:

    <item>
      <blocks>36</blocks>
      <path>./src</path>
    </item>
    <item>
      <blocks>40</blocks>
      <path>./bin</path>
    </item>
    <item>
      <blocks>90</blocks>
      <path>.</path>
    </item>

XML is a W3C standard for encoding data.  See w3c.org/TR/xml for
additional information.

*** JSON Output

JSON output consists of a hierarchical set of objects and lists, each
encoded with a quoted name, a colon, and a value.  If the value is a
string, it must be quoted, but numbers are not quoted.  Objects are
encoded using braces; lists are encoded using square brackets.
Data inside objects and lists is separated using commas:

    items: [
        { "blocks": 36, "path" : "./src" },
        { "blocks": 40, "path" : "./bin" },
        { "blocks": 90, "path" : "./" }
    ]

*** HTML Output

HTML output is designed to allow the output to be rendered in a web
browser with minimal effort.  Each piece of output data is rendered
inside a <div> element, with a class name related to the role of the
data.  By using a small set of class attribute values, a CSS
stylesheet can render the HTML into rich text that mirrors the
traditional text content.

Additional attributes can be enabled to provide more details about the
data, including data type, description, and an XPath location.

    <div class="line">
      <div class="data" data-tag="blocks">36</div>
      <div class="padding">      </div>
      <div class="data data-tag="path">./src</div>
    </div>
    <div class="line">
      <div class="data" data-tag="blocks">40</div>
      <div class="padding">      </div>
      <div class="data data-tag="path">./bin</div>
    </div>
    <div class="line">
      <div class="data" data-tag="blocks">90</div>
      <div class="padding">      </div>
      <div class="data data-tag="path">./</div>
    </div>

** Format Strings

libxo uses format strings to control the rendering of data into the
various output styles.  Each format string contains a set of zero or
more field descriptions, which describe independent data fields.  Each
field description contains a set of modifiers, a content string, and
zero, one, or two format descriptors.  The modifiers tell libxo what
the field is and how to treat it, while the format descriptors are
formatting instructions using printf-style format strings, telling
libxo how to format the field.  The field description is placed inside
a set of braces, with a colon (":") after the modifiers and a slash
("/") before each format descriptors.  Text may be intermixed with
field descriptions within the format string.

The field description is given as follows:

  '{' [ modifiers ] ':' content [ '/' format [ '/' eformat ]] '}'

In this example, three format descriptions appear.  The first is a
padding field containing three spaces of padding, the second is a
label ("In stock"), and the third is a value field ("in-stock").  The
in-stock field has a "%u" format that will parse the next argument
passed to xo_emit as an unsigned integer.

        xo_emit("{P:   }{Lwc:In stock}{:in-stock/%u}\n", 65);

This single line of code can generate text ("   In stock: 65\n"),
XML ("<in-stock>65</in-stock>"), JSON ('"in-stock": 6'), or HTML (too
lengthy to be listed here).

*** Modifier Roles

Modifiers are optional, and indicate the role and formatting of the
content.  The roles are listed below; only one role is permitted:

|---+--------------+-------------------------------------------------|
| M | Name         | Description                                     |
|---+--------------+-------------------------------------------------|
| D | decoration   | Field is non-text (e.g. colon, comma)           |
| E | error        | Field is an error message                       |
| L | label        | Field is text that prefixes a value             |
| N | note         | Field is text that follows a value              |
| P | padding      | Field is spaces needed for vertical alignment   |
| T | title        | Field is a title value for headings             |
| V | value        | Field is the name of field (the default)        |
| W | warning      | Field is a warning message                      |
| [ | start anchor | Begin a section of anchored variable-width text |
| ] | stop anchor  | End a section of anchored variable-width text   |
|---+--------------+-------------------------------------------------|

**** The Decoration Role ({D:})

Decorations are typically punctuation marks such as colons,
semi-colons, and commas used to decorate the text and make it simpler
for human readers.  By marking these distinctly, HTML usage scenarios
can use CSS to direct their display parameters.

    xo_emit("{D:((}{:name}{D:))}\n", name);

**** The Label Role ({L:})

Labels are text that appears before a value.

    xo_emit("{Lwc:Cost}{:cost/%u}\n", cost);

**** The Note Role ({L:})

Notes are text that appears after a value.

    xo_emit("{:cost/%u} {N:per year}\n", cost);

**** The Padding Role ({P:})

Padding represents whitespace used before and between fields.

The padding content can be either static, when placed directly within
the field descriptor, or a printf-style format descriptor can be used,
if preceded by a slash ("/"):

    xo_emit("{P:        }{Lwc:Cost}{:cost/%u}\n", cost);
    xo_emit("{P:/30s}{Lwc:Cost}{:cost/%u}\n", "", cost);

**** The Title Role ({T:})

Title are heading or column headers that are meant to be displayed to
the user.  The title can be either static, when placed directly within
the field descriptor, or a printf-style format descriptor can be used,
if preceded by a slash ("/"):

    xo_emit("{T:Interface Statistics}\n");
    xo_emit("{T:/%20.20s}{T:/%6.6s}\n", "Item Name", "Cost");

**** The Value Role ({V:} and {:})

The value role is used to represent the a data value that is
interesting for the non-display output styles (XML and JSON).  Value
is the default role; if no other role designation is given, the field
is a value.  The field name must appear within the field descriptor,
followed by one or two format descriptors.  The first format
descriptor is used for display styles (TEXT and HTML), while the
second one is used for encoding styles (XML and JSON).  If no second
format is given, the encoding format defaults to the first format,
with any minimum width removed.  If no first format is given, both
format descriptors default to "%s".

    xo_emit("{:length/%02u}x{:width/%02u}x{:height/%02u}\n",
            length, width, height);
    xo_emit("{:author} wrote \"{:poem}\" in {:year/%4d}\n,
            author, poem, year);

**** The Anchor Modifiers ({[:} and {]:})

The anchor roles allow a set of strings by be padded as a group,
but still be visible to xo_emit as distinct fields.  Either the start
or stop anchor can give a field width and it can be either directly in
the descriptor or passed as an argument.  Any fields between the start
and stop anchor are padded to meet the minimum width given.

To give a width directly, encode it as the content of the anchor tag:

    xo_emit("({[:10}{:min/%d}/{:max/%d}{]:})\n", min, max);

To pass a width as an argument, use "%d" as the format, which must
appear after the "/".  Note that only "%d" is supported for widths.
Using any other value could ruin your day.

    xo_emit("({[:/%d}{:min/%d}/{:max/%d}{]:})\n", width, min, max);

If the width is negative, padding will be added on the right, suitable
for left justification.  Otherwise the padding will be added to the
left of the fields between the start and stop anchors, suitable for
right justification.  If the width is zero, nothing happens.  If the
number of columns of output between the start and stop anchors is less
than the absolute value of the given width, nothing happens.

*** Modifier Flags

The modifiers can also include the following flags, which modify the
content emitted for some output styles:

|---+--------------+-------------------------------------------------|
| M | Name         | Description                                     |
|---+--------------+-------------------------------------------------|
| c | colon        | A colon (":") is appended after the label       |
| d | display      | Only emit field for display styles (text/HTML)  |
| e | encoding     | Only emit for encoding styles (XML/JSON)        |
| k | key          | Field is a key, suitable for XPath predicates   |
| n | no-quotes    | Do not quote the field when using JSON style    |
| q | quotes       | Quote the field when using JSON style           |
| w | white space  | A blank (" ") is appended after the label       |
|---+--------------+-------------------------------------------------|

For example, the modifier string "Lwc" means the field is a label
(text that describes the next field) and should be followed by a colon
('c') and a space ('w').  The modifier string "Vkq" means the field is
a value field, that it is a key for the current instance, and that the
value should be quoted when encoded for JSON.

**** The Colon Modifier ({c:})

The colon modifier appends a single colon to the data value:

    EXAMPLE:
      xo_emit("{Lc:Name}{:name}\n", "phil");
    TEXT:
      Name:phil

The colon modifier is only used for the TEXT and HTML output
styles. It is commonly combined with the space modifier ('{w:').
It is purely a convenience feature.

**** The Display Modifier ({d:})

The display modifier indicated the field should only be generated for
the display output styles, TEXT and HTML.

    EXAMPLE:
      xo_emit("{Lcw:Name}{d:name} {:id/%d}\n", "phil", 1);
    TEXT:
      Name: phil 1
    XML:
      <id>1</id>

The display modifier is the opposite of the encoding modifier, and
they are often used to give to distinct views of the underlying data.

**** The Encoding Modifier ({e:})

The display modifier indicated the field should only be generated for
the display output styles, TEXT and HTML.

    EXAMPLE:
      xo_emit("{Lcw:Name}{:name} {e:id/%d}\n", "phil", 1);
    TEXT:
      Name: phil
    XML:
      <name>phil</name><id>1</id>

The encoding modifier is the opposite of the display modifier, and
they are often used to give to distinct views of the underlying data.

**** The Key Modifier ({k:})

The key modifier is used to indicate that a particular field helps
uniquely identify an instance of list data.

    EXAMPLE:
        xo_open_list("user");
        for (i = 0; i < num_users; i++) {
	    xo_open_instance("user");
            xo_emit("User {k:name} has {:count} tickets\n",
               user[i].u_name, user[i].u_tickets);
            xo_close_instance("user");
        }
        xo_close_list("user");

Currently the key modifier is only used when generating XPath value
for the HTML output style when XOF_XPATH is set, but other uses are
likely in the near future.

**** The No-Quotes Modifier ({n:})

The no-quotes modifier (and its twin, the 'quotes' modifier) affect
the quoting of values in the JSON output style.  JSON uses quotes for
string value, but no quotes for numeric, boolean, and null data.
xo_emit applies a simple heuristic to determine whether quotes are
needed, but often this needs to be controlled by the caller.

    EXAMPLE:
      const char *bool = is_true ? "true" : "false";
      xo_emit("{n:fancy/%s}", bool);
    JSON:
      "fancy": true

**** The Quotes Modifier ({q:})

The quotes modifier (and its twin, the 'no-quotes' modifier) affect
the quoting of values in the JSON output style.  JSON uses quotes for
string value, but no quotes for numeric, boolean, and null data.
xo_emit applies a simple heuristic to determine whether quotes are
needed, but often this needs to be controlled by the caller.

    EXAMPLE:
      xo_emit("{q:time/%d}", 2014);
    JSON:
      "year": "2014"

**** The White Space Modifier ({w:})

The white space modifier appends a single space to the data value:

    EXAMPLE:
      xo_emit("{Lw:Name}{:name}\n", "phil");
    TEXT:
      Name phil

The white space modifier is only used for the TEXT and HTML output
styles. It is commonly combined with the colon modifier ('{c:').
It is purely a convenience feature.

*** Format String

The "format" string is similar to the format string for printf(3).
If not provided, the format string defaults to "%s".

Note a field definition can contain zero or more printf-style
'directives', which are sequences that start with a '%' and end
with a one of following characters: "diouxXDOUeEfFgGaAcCsSp".  Each
directive is matched by one of more arguments to the xo_emit
function.

The format string has the form:

  '%' format- modifier * format-character

The format- modifier can be:
- a '#' character, indicating the output value should be prefixed with
'0x', typically to indicate a base 16 (hex) value.
- a minus sign ('-'), indicating the output value should be padded on
the right instead of the left.
- a leading zero ('0') indicating the output value should be padded on the
left with zeroes instead of spaces (' ').
- one or more digits ('0' - '9') indicating the minimum width of the
argument.  If the width in columns of the output value is less that
the minumum width, the value will be padded to reach the minimum.
- a period followed by one or more digits indicating the maximum
number of bytes which will be examined for a string argument, or the maximum
width for a non-string argument.  When handling ASCII strings this is
functions as the field width but for multi-byte characters, a single
character may be composed of multiple bytes.
xo_emit will never dereference memory beyond the given number of bytes.
- a second period followed by one or more digits indicating the maximum
width for a string argument.  This modifier cannot be given for non-string
arguments. 
- one or more 'h' characters, indicating shorter input data.
- one or more 'l' characters, indicating longer input data.
- a 'z' character, indicating a 'size_t' argument.
- a 't' character, indicating a 'ptrdiff_t' argument.
- a ' ' character, indicating a space should be emitted before
positive numbers.
- a '+' character, indicating sign should emitted before any number.

Note that 'q', 'D', 'O', and 'U' are considered deprecated and will be
removed eventually.

The format character is described in the following table:

|-----+-----------------+----------------------|
| Ltr | Argument Type   | Format               |
|-----+-----------------+----------------------|
| d   | 'int'           | base 10 (decimal)    |
| i   | 'int'           | base 10 (decimal)    |
| o   | 'int'           | base 8 (octal)       |
| u   | 'unsigned'      | base 10 (decimal)    |
| x   | 'unsigned'      | base 16 (hex)        |
| X   | 'unsigned long' | base 16 (hex)        |
| D   | long'           | base 10 (decimal)    |
| O   | 'unsigned long' | base 8 (octal)       |
| U   | 'unsigned long' | base 10 (decimal)    |
| e   | 'double'        | [-]d.ddde+-dd        |
| E   | 'double'        | [-]d.dddE+-dd        |
| f   | 'double'        | [-]ddd.ddd           |
| F   | 'double'        | [-]ddd.ddd           |
| g   | 'double'        | as 'e' or 'f'        |
| G   | 'double'        | as 'E' or 'F'        |
| a   | 'double'        | [-]0xh.hhhp[+-]d     |
| A   | 'double'        | [-]0Xh.hhhp[+-]d     |
| c   | 'unsigned char' | a character          |
| C   | 'wint_t'        | a character          |
| s   | 'char *'        | a UTF-8 string       |
| S   | 'wchar_t *      | a unicode/WCS string |
| p   | 'void *'        | '%#lx'               |
|-----+-----------------+----------------------|

The 'h' and 'l' modifiers affect the size and treatment of the
argument:

|-----+-------------+--------------------|
| Mod | d, i        | o, u, x, X         |
|-----+-------------+--------------------|
| hh  | signed char | unsigned char      |
| h   | short       | unsigned short     |
| l   | long        | unsigned long      |
| ll  | long long   | unsigned long long |
| j   | intmax_t    | uintmax_t          |
| t   | ptrdiff_t   | ptrdiff_t          |
| z   | size_t      | size_t             |
| q   | quad_t      | u_quad_t           |
|-----+-------------+--------------------|

For strings, the 'h' and 'l' modifiers affect the interpretation of
the bytes pointed to argument.  The default '%s' string is a 'char *'
pointer to a string encoded as UTF-8.  Since UTF-8 is compatible with
ASCII data, a normal 7-bit ASCII string can be used.  '%ls' expects a
'wchar_t *' pointer to a wide-character string, encoded as a 32-bit
Unicode values.  '%hs' expects a 'char *' pointer to a multi-byte
string encoded with the current locale, as given by the LC_CTYPE,
LANG, or LC_ALL environment varibles.  The first of this list of
variables is used and if none of the variables, the locale defaults to
"UTF-8".

For example, a function is passed a locale-base name, a hat size,
and a time value.  The hat size is formatted in a UTF-8 (ASCII)
string, and the time value is formatted into a wchar_t string.

    void print_order (const char *name, int size,
                      struct tm *timep) {
        char buf[32];
        const char *size_val = "unknown";

	if (size > 0)
            snprintf(buf, sizeof(buf), "%d", size);
            size_val = buf;
        }

        wchar_t when[32];
        wcsftime(when, sizeof(when), L"%d%b%y", timep);

        xo_emit("The hat for {:name/%hs} is {:size/%s}.\n",
                name, size_val);
        xo_emit("It was ordered on {:order-time/%ls}.\n",
                when);
    }

It is important to note that xo_emit will perform the conversion
required to make appropriate output.  Text style output uses the
current locale (as described above), while XML, JSON, and HTML use
UTF-8.

*** Characters Outside of Field Definitions

Characters in the format string are not part of a field definition are
copied to the output for the TEXT style, and are ignored for the JSON
and XML styles.  For HTML, these characters are placed in a <div> with
class "text".

  TEXT:
      The hat is extra small.
  XML:
      <size>extra small</size>
  JSON:
      "size": "extra small"
  TEXT:
      <div class="text">The hat is </div>
      <div class="data" data-tag="size">extra small</div>
      <div class="text">.</div>

*** "%n" is Not Supported

libxo does not support the '%n' directive.  It's a bad idea and we
just don't do it.

*** The Encoding Format (eformat)

The "eformat" string is the format string used when encoding the field
for JSON and XML.  If not provided, it defaults to the primary format
with any minimum width removed.  If the primary is not given, it
defaults to "%s".

*** Content Strings

For padding and labels, the content string is considered the one and
only argument to the formatting string.  

*** Example

In this example, the value for the number of items in stock is emitted:

        xo_emit("{P:   }{Lwc:In stock}{:in-stock/%u}\n",
                instock);

This call will generate the following output:

  TEXT: 
       In stock: 144
  XML:
      <in-stock>144</in-stock>
  JSON:
      "in-stock": 144,
  HTML:
      <div class="line">
        <div class="padding">   </div>
        <div class="label">In stock</div>
        <div class="decoration">:</div>
        <div class="padding"> </div>
        <div class="data" data-tag="in-stock">144</div>
      </div>

Clearly HTML wins the verbosity award, and this output does
not include XOF_XPATH or XOF_INFO data, which would expand the
penultimate line to:

       <div class="data" data-tag="in-stock"
          data-xpath="/top/data/item/in-stock"
          data-type="number"
          data-help="Number of items in stock">144</div>

** Representing Hierarchy

For XML and JSON, individual fields appear inside hierarchies which
provide context and meaning to the fields.  Unfortunately, these
encoding have a basic disconnect between how lists is similar objects
are represented.

XML encodes lists as set of sequential elements:

    <user>phil</user>
    <user>rob</user>
    <user>simon</user>

JSON encodes lists using a single name and square brackets:

    "user": [ "phil", "rob", "simon" ]

This means libxo needs three distinct indications hierarchy: one for
containers of hierarchy that are not related to lists, one for lists, and
one for each item in a list.

*** Containers

A "container" is an element of a hierarchy that appears only once per
parent.  The container has no value, but serves to contain other nodes.

To open a container, call xo_open_container() or
xo_open_container_h().  The former uses the default handle and
the latter accepts a specific handle.

    int xo_open_container_h (xo_handle_t *xop, const char *name);
    int xo_open_container (const char *name);

To close a level, use the xo_close_container() or
xo_close_container_h() functions:

    int xo_close_container_h (xo_handle_t *xop, const char *name);
    int xo_close_container (const char *name);

Each open call must have a matching close call.  If the XOF_WARN flag
is set and the name given does not match the name of the currently open
container, a warning will be generated.

    Example:

        xo_open_container("top");
        xo_open_container("system");
        xo_emit("{:host-name/%s%s%s", hostname,
                domainname ? "." : "", domainname ?: "");
        xo_close_container("system");
        xo_close_container("top");

    Sample Output:
      Text:
        my-host.example.org
      XML:
        <top>
          <system>
              <host-name>my-host.example.org</host-name>
          </system>
        </top>
      JSON:
        "top" : {
          "system" : {
              "host-name": "my-host.example.org"
          }
        }
      HTML:
        <div class="data"
             data-tag="host-name">my-host.example.org</div>

*** Lists and Instances

A list is set of one or more instances that appear under the same
parent.  The instances contains details about a specific object.  One
can think of instances as objects or records.  A call is needed to
open and close the list, while a distinct call is needed to open and
close each instance of the list:

    xo_open_list("item");

    for (ip = list; ip->i_title; ip++) {
        xo_open_instance("item");
        xo_emit("{L:Item} '{:name/%s}':\n", ip->i_title);
        xo_close_instance("item");
    }

    xo_close_list("item");

Getting the list and instance calls correct is critical to the proper
generation of XML and JSON data.

*** DTRT Mode

Some user may find tracking the names of open containers, lists, and
instances inconvenient.  libxo offers "Do The Right Thing" mode, where
libxo will track the names of open containers, lists, and instances so
the close function can be called without a name.  To enable DTRT mode,
turn on the XOF_DTRT flag prior to making any other libxo output.

    xo_set_flags(NULL, XOF_DTRT);

Each open and close function has a version with the suffix "_d", which
will close the open container, list, or instance:

    xo_open_container("top");
    ...
    xo_close_container_d();

Note that the XOF_WARN flag will also cause libxo to track open
containers, lists, and instances.  A warning is generated with the
name given to the close function and the name recorded do not match.

** Handles

libxo uses "handles" to control its rendering functionality.  The
handle contains state and buffered data, as well as callback functions
to process data.

A default handle is used when a NULL is passed to functions accepting
a handle.  This handle is initialized to write its data to stdout
using the default style of text (XO_STYLE_TEXT).

For the convenience of callers, the libxo library includes handle-less
functions that implicitly use the default handle.  Any function that
takes a handle will use the default handle is a value of NULL is
passed in place of a valid handle.

For example, the following are equivalent:

    xo_emit("test");
    xo_emit_h(NULL, "test");

Handles are created using xo_create() and destroy using xo_destroy().

** UTF-8

All strings for libxo must be UTF-8.  libxo will handle turning them
into locale-based strings for display to the user.

The only exception is argument formatted using the "%ls" format, which
require a wide character string (wchar_t *) as input.  libxo will
convert these arguments as needed to either UTF-8 (for XML, JSON, and
HTML styles) or locale-based strings for display in text style.

   xo_emit("Alll strings are utf-8 content {:tag/%ls}",
           L"except for wide strings");

"%S" is equivalent to "%ls".

* The libxo API

This section gives details about the functions in libxo, how to call
them, and the actions they perform.

** Handles

Handles give an abstraction for libxo that encapsulates the state of a
stream of output.  Handles have the data type "xo_handle_t" and are
opaque to the caller.

The library has a default handle that is automatically initialized.
By default, this handle will send text style output to standard output.
The xo_set_style and xo_set_flags functions can be used to change this
behavior.

Many libxo functions take a handle as their first parameter; most that
do not use the default handle.  Any function taking a handle can
be passed NULL to access the default handle.

For the typical command that is generating output on standard output,
there is no need to create an explicit handle, but they are available
when needed, e.g. for daemons that generate multiple streams of
output.

*** xo_create

A handle can be allocated using the xo_create() function:

    xo_handle_t *xo_create (unsigned style, unsigned flags);

  Example:
    xo_handle_t *xop = xo_create(XO_STYLE_JSON, XOF_WARN);
    ....
    xo_emit(xop, "testing\n");

See also ^styles^ and ^flags^.

*** xo_create_to_file

By default, libxo writes output to standard output.  A convenience
function is provided for situations when output should be written to
different file:

    xo_handle_t *xo_create_to_file (FILE *fp, unsigned style,
                                    unsigned flags);

Use the XOF_CLOSE_FP flag to trigger a call to fclose() for
the FILE pointer when the handle is destroyed.

*** xo_set_writer

The xo_set_writer function allows custom 'write' functions
which can tailor how libxo writes data.  An opaque argument is
recorded and passed back to the write function, allowing the function
to acquire context information. The 'close' function can
release this opaque data and any other resources as needed.

    void xo_set_writer (xo_handle_t *xop, void *opaque,
                        xo_write_func_t write_func,
                        xo_close_func_t close_func);

*** xo_set_style

To set the style, use the xo_set_style() function:

    void xo_set_style(xo_handle_t *xop, unsigned style);

To use the default handle, pass a NULL handle:

    xo_set_style(NULL, XO_STYLE_XML);

*** xo_set_flags

To set the flags, use the xo_set_flags() function:

    void xo_set_flags(xo_handle_t *xop, unsigned flags);

To use the default handle, pass a NULL handle:

    xo_set_style(NULL, XO_STYLE_XML);

*** xo_destroy

The xo_destroy function releases a handle and any resources it is
using.  Calling xo_destroy with a NULL handle will release any
resources associated with the default handle.

    void xo_destroy(xo_handle_t *xop);

** Emitting Content

** Emitting Hierarchy

** Additional Functionality

*** Output Styles (XO_STYLE_*) @styles@

The libxo functions accept a set of output styles:

|---------------+-------------------------|
| Flag          | Description             |
|---------------+-------------------------|
| XO_STYLE_TEXT | Traditional text output |
| XO_STYLE_XML  | XML encoded data        |
| XO_STYLE_JSON | JSON encoded data       |
| XO_STYLE_HTML | HTML encoded data       |
|---------------+-------------------------|

** Flags (XOF_*) @flags@

The set of valid flags include:

|---------------+-----------------------------------------|
| Flag          | Description                             |
|---------------+-----------------------------------------|
| XOF_CLOSE_FP  | Close file pointer on xo_destroy()      |
| XOF_PRETTY    | Make 'pretty printed' output            |
| XOF_WARN      | Generate warnings for broken calls      |
| XOF_WARN_XML  | Generate warnings in XML on stdout      |
| XOF_NO_ENV    | Do not use the LIBXO_OPTIONS env var    |
| XOF_DTRT      | Enable "do the right thing" mode        |
|---------------+-----------------------------------------|

The XOF_CLOSE_FP flag will trigger the call of the close_func
(provided via xo_set_writer()) when the handle is destroyed.

The XOF_PRETTY flag requests 'pretty printing', which will trigger the
addition of indentation and newlines to enhance the readability of
XML, JSON, and HTML output.  Text output is not affected.

The XOF_WARN flag requests that warnings will trigger diagnostic
output (on standard error) when the library notices errors during
operations, or with arguments to functions.  Without warning enabled,
such conditions are ignored.

Warnings allow developers to debug their interaction with libxo.
The function "xo_failure" can used as a breakpoint for a debugger,
regardless of whether warnings are enabled.

If the style is XO_STYLE_HTML, the following additional flags can be
used:

|---------------+-----------------------------------------|
| Flag          | Description                             |
|---------------+-----------------------------------------|
| XOF_XPATH     | Emit "data-xpath" attributes            |
| XOF_INFO      | Emit additional info fields             |
|---------------+-----------------------------------------|

The XOF_XPATH flag enables the emission of XPath expressions detailing
the hierarchy of XML elements used to encode the data field, if the
XPATH style of output were requested.

The XOF_INFO flag encodes additional informational fields for HTML
output.  See ^info^ for details.

If the style is XO_STYLE_XML, the following additional flags can be
used:

|---------------+-----------------------------------------|
| Flag          | Description                             |
|---------------+-----------------------------------------|
| XOF_KEYS      | Flag 'key' fields for xml               |
|---------------+-----------------------------------------|

The XOF_KEYS flag adds 'key' attribute to the XML encoding for
field definitions that use the 'k' modifier.  The key attribute has
the value "key":

    xo_emit("{k:name}", item);

  XML:
      <name key="key">truck</name>

*** Information @info@

HTML data can include additional information in attributes that
begin with "data-".  To enable this, three things must occur:

First the application must build an array of xo_info_t structures,
one per tag.  The array must be sorted by name, since libxo uses a
binary search to find the entry that matches names from format
instructions.

Second, the application must inform libxo about this information using
the xo_set_info() call:

    typedef struct xo_info_s {
        const char *xi_name;    /* Name of the element */
        const char *xi_type;    /* Type of field */
        const char *xi_help;    /* Description of field */
    } xo_info_t;

    void xo_set_info (xo_handle_t *xop, xo_info_t *infop, int count);

Like other libxo calls, passing NULL for the handle tells libxo to use
the default handle.

If the count is -1, libxo will count the elements of infop, but there
must be an empty element at the end.  More typically, the number is
known to the application:

    xo_info_t info[] = {
        { "in-stock", "number", "Number of items in stock" },
        { "name", "string", "Name of the item" },
        { "on-order", "number", "Number of items on order" },
        { "sku", "string", "Stock Keeping Unit" },
        { "sold", "number", "Number of items sold" },
    };
    int info_count = (sizeof(info) / sizeof(info[0]));
    ...
    xo_set_info(NULL, info, info_count);

The type and help values, if present, are emitted as the "data-type"
and "data-help" attributes:

  <div class="data" data-tag="sku" data-type="string" 
       data-help="Stock Keeping Unit">GRO-000-533</div>

*** Memory Allocation

The xo_set_allocator function allows libxo to be used in environments
where the standard realloc() and free() functions are not available.

    void xo_set_allocator (xo_realloc_func_t realloc_func,
                           xo_free_func_t free_func);

realloc_func should expect the same arguments as realloc(3) and return
a pointer to memory following the same convention.  free_func will
receive the same argument as free(3) and should release it, as
appropriate for the environment.

*** LIBXO_OPTIONS

Another debugging tool is the environment variable "LIBXO_OPTIONS",
which can be set to a string of options.

|--------+-------------------------------------------|
| Option | Action                                    |
|--------+-------------------------------------------|
| H      | Enable HTML output (XO_STYLE_HTML)        |
| I      | Enable info output (XOF_INFO)             |
| i<num> | Indent by <number>                        |
| J      | Enable JSON output (XO_STYLE_JSON)        |
| P      | Enable pretty-printed output (XOF_PRETTY) |
| T      | Enable text output (XO_STYLE_TEXT)        |
| W      | Enable warnings (XOF_WARN)                |
| X      | Enable XML output (XO_STYLE_XML)          |
| x      | Enable XPath data (XOF_XPATH)             |
|--------+-------------------------------------------|

For example, warnings can be enabled by:

    % env LIBXO_OPTIONS=W my-app

Complete HTML output can be generated with:

    % env LIBXO_OPTIONS=HXI my-app

* The "xo" Utility

The "xo" utility allows command line access to the functionality of
the libxo library.  Using "xo", shell scripts can emit XML, JSON, and
HTML using the same commands that emit text output.

The style of output can be selected using a specific option: "-X" for
XML, "-J" for JSON, "-H" for HTML, or "-T" for TEXT, which is the
default.  The "--style <style>" option can also be used.  The
LIBXO_OPTIONS environment variable can also be used to set the style,
as well as other flags.

The "xo" utility accepts a format string suitable for xo_emit() and a
set of zero or more arguments used to supply data for that string.

    xo "The {k:name} weighs {:weight/%d} pounds.\n" fish 6

  TEXT:
    The fish weighs 6 pounds.
  XML:
    <name>fish</name>
    <weight>6</weight>
  JSON:
    "name": "fish",
    "weight": 6
  HTML:
    <div class="line">
      <div class="text">The </div>
      <div class="data" data-tag="name">fish</div>
      <div class="text"> weighs </div>
      <div class="data" data-tag="weight">6</div>
      <div class="text"> pounds.</div>
    </div>

The "--wrap <path>" option can be used to wrap emitted content in a
specific hierarchy.  The path is a set of hierarchical names separated
by the '/' character.

    xo --wrap top/a/b/c '{:tag}' value

  XML:
    <top>
      <a>
        <b>
          <c>
            <tag>value</tag>
          </c>
        </b>
      </a>
    </top>
  JSON:
    "top": {
      "a": {
        "b": {
          "c": {
            "tag": "value"
          }
        }
      }
    }

The "--open <path>" and "--close <path>" can be used to emit
hierarchical information without the matching close and open
tag.  This allows a shell script to emit open tags, data, and
then close tags.  The "--depth" option may be used to set the
depth for indentation.  The "--leading-xpath" may be used to
prepend data to the XPath values used for HTML output style.

    #!/bin/sh
    xo --open top/data
    xo --depth 2 '{tag}' value
    xo --close top/data
  XML:
    <top>
      <data>
        <tag>value</tag>
      </data>
    </top>
  JSON:
    "top": {
      "data": {
        "tag": "value"
      }
    }

** Command Line Options

Usage: xo [options] format [fields]
  --close <path>        Close tags for the given path
  --depth <num>         Set the depth for pretty printing
  --help                Display this help text
  --html OR -H          Generate HTML output
  --json OR -J          Generate JSON output
  --leading-xpath <path> Add a prefix to generated XPaths (HTML)
  --open <path>         Open tags for the given path
  --pretty OR -p        Make 'pretty' output (add indent, newlines)
  --style <style>       Generate given style (xml, json, text, html)
  --text OR -T          Generate text output (the default style)
  --version             Display version information
  --warn OR -W          Display warnings in text on stderr
  --warn-xml            Display warnings in xml on stdout
  --wrap <path>         Wrap output in a set of containers
  --xml OR -X           Generate XML output
  --xpath               Add XPath data to HTML output);

** Example

  % xo 'The {:product} is {:status}\n' stereo "in route"
  The stereo is in route
  % ./xo/xo -p -X 'The {:product} is {:status}\n' stereo "in route"
  <product>stereo</product>
  <status>in route</status>

* Examples

** Unit Test

Here is the unit test example:

int
main (int argc, char **argv)
{
    static char base_grocery[] = "GRO";
    static char base_hardware[] = "HRD";
    struct item {
        const char *i_title;
        int i_sold;
        int i_instock;
        int i_onorder;
        const char *i_sku_base;
        int i_sku_num;
    };
    struct item list[] = {
        { "gum", 1412, 54, 10, base_grocery, 415 },
        { "rope", 85, 4, 2, base_hardware, 212 },
        { "ladder", 0, 2, 1, base_hardware, 517 },
        { "bolt", 4123, 144, 42, base_hardware, 632 },
        { "water", 17, 14, 2, base_grocery, 2331 },
        { NULL, 0, 0, 0, NULL, 0 }
    };
    struct item list2[] = {
        { "fish", 1321, 45, 1, base_grocery, 533 },
    };
    struct item *ip;
    xo_info_t info[] = {
        { "in-stock", "number", "Number of items in stock" },
        { "name", "string", "Name of the item" },
        { "on-order", "number", "Number of items on order" },
        { "sku", "string", "Stock Keeping Unit" },
        { "sold", "number", "Number of items sold" },
        { NULL, NULL, NULL },
    };
    int info_count = (sizeof(info) / sizeof(info[0])) - 1;
    
    for (argc = 1; argv[argc]; argc++) {
        if (strcmp(argv[argc], "xml") == 0)
            xo_set_style(NULL, XO_STYLE_XML);
        else if (strcmp(argv[argc], "json") == 0)
            xo_set_style(NULL, XO_STYLE_JSON);
        else if (strcmp(argv[argc], "text") == 0)
            xo_set_style(NULL, XO_STYLE_TEXT);
        else if (strcmp(argv[argc], "html") == 0)
            xo_set_style(NULL, XO_STYLE_HTML);
        else if (strcmp(argv[argc], "pretty") == 0)
            xo_set_flags(NULL, XOF_PRETTY);
        else if (strcmp(argv[argc], "xpath") == 0)
            xo_set_flags(NULL, XOF_XPATH);
        else if (strcmp(argv[argc], "info") == 0)
            xo_set_flags(NULL, XOF_INFO);
    }

    xo_set_info(NULL, info, info_count);

    xo_open_container_h(NULL, "top");

    xo_open_container("data");
    xo_open_list("item");

    for (ip = list; ip->i_title; ip++) {
        xo_open_instance("item");

        xo_emit("{L:Item} '{k:name/%s}':\n", ip->i_title);
        xo_emit("{P:   }{L:Total sold}: {n:sold/%u%s}\n",
                ip->i_sold, ip->i_sold ? ".0" : "");
        xo_emit("{P:   }{Lwc:In stock}{:in-stock/%u}\n", 
                ip->i_instock);
        xo_emit("{P:   }{Lwc:On order}{:on-order/%u}\n", 
                ip->i_onorder);
        xo_emit("{P:   }{L:SKU}: {q:sku/%s-000-%u}\n",
                ip->i_sku_base, ip->i_sku_num);

        xo_close_instance("item");
    }

    xo_close_list("item");
    xo_close_container("data");

    xo_open_container("data");
    xo_open_list("item");

    for (ip = list2; ip->i_title; ip++) {
        xo_open_instance("item");

        xo_emit("{L:Item} '{:name/%s}':\n", ip->i_title);
        xo_emit("{P:   }{L:Total sold}: {n:sold/%u%s}\n",
                ip->i_sold, ip->i_sold ? ".0" : "");
        xo_emit("{P:   }{Lwc:In stock}{:in-stock/%u}\n", 
                ip->i_instock);
        xo_emit("{P:   }{Lwc:On order}{:on-order/%u}\n", 
                ip->i_onorder);
        xo_emit("{P:   }{L:SKU}: {q:sku/%s-000-%u}\n",
                ip->i_sku_base, ip->i_sku_num);

        xo_close_instance("item");
    }

    xo_close_list("item");
    xo_close_container("data");

    xo_close_container_h(NULL, "top");

    return 0;
}

% ./testxo text
Item 'gum':
   Total sold: 1412.0
   In stock: 54
   On order: 10
   SKU: GRO-000-415
Item 'rope':
   Total sold: 85.0
   In stock: 4
   On order: 2
   SKU: HRD-000-212
Item 'ladder':
   Total sold: 0
   In stock: 2
   On order: 1
   SKU: HRD-000-517
Item 'bolt':
   Total sold: 4123.0
   In stock: 144
   On order: 42
   SKU: HRD-000-632
Item 'water':
   Total sold: 17.0
   In stock: 14
   On order: 2
   SKU: GRO-000-2331
Item 'fish':
   Total sold: 1321.0
   In stock: 45
   On order: 1
   SKU: GRO-000-533
% ./testxo json pretty
"top": {
  "data": {
    "item": [
      {
        "name": "gum",
        "sold": 1412.0,
        "in-stock": 54,
        "on-order": 10,
        "sku": "GRO-000-415"
      },
      {
        "name": "rope",
        "sold": 85.0,
        "in-stock": 4,
        "on-order": 2,
        "sku": "HRD-000-212"
      },
      {
        "name": "ladder",
        "sold": 0,
        "in-stock": 2,
        "on-order": 1,
        "sku": "HRD-000-517"
      },
      {
        "name": "bolt",
        "sold": 4123.0,
        "in-stock": 144,
        "on-order": 42,
        "sku": "HRD-000-632"
      },
      {
        "name": "water",
        "sold": 17.0,
        "in-stock": 14,
        "on-order": 2,
        "sku": "GRO-000-2331"
      }
    ]
  },
  "data": {
    "item": [
      {
        "name": "fish",
        "sold": 1321.0,
        "in-stock": 45,
        "on-order": 1,
        "sku": "GRO-000-533"
      }
    ]
  }
}
% ./testxo pretty xml
<top>
  <data>
    <item>
      <name>gum</name>
      <sold>1412.0</sold>
      <in-stock>54</in-stock>
      <on-order>10</on-order>
      <sku>GRO-000-415</sku>
    </item>
    <item>
      <name>rope</name>
      <sold>85.0</sold>
      <in-stock>4</in-stock>
      <on-order>2</on-order>
      <sku>HRD-000-212</sku>
    </item>
    <item>
      <name>ladder</name>
      <sold>0</sold>
      <in-stock>2</in-stock>
      <on-order>1</on-order>
      <sku>HRD-000-517</sku>
    </item>
    <item>
      <name>bolt</name>
      <sold>4123.0</sold>
      <in-stock>144</in-stock>
      <on-order>42</on-order>
      <sku>HRD-000-632</sku>
    </item>
    <item>
      <name>water</name>
      <sold>17.0</sold>
      <in-stock>14</in-stock>
      <on-order>2</on-order>
      <sku>GRO-000-2331</sku>
    </item>
  </data>
  <data>
    <item>
      <name>fish</name>
      <sold>1321.0</sold>
      <in-stock>45</in-stock>
      <on-order>1</on-order>
      <sku>GRO-000-533</sku>
    </item>
  </data>
</top>
% ./testxo pretty html
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name">gum</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold">1412.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock">54</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order">10</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku">GRO-000-415</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name">rope</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold">85.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock">4</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order">2</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku">HRD-000-212</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name">ladder</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold">0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock">2</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order">1</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku">HRD-000-517</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name">bolt</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold">4123.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock">144</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order">42</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku">HRD-000-632</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name">water</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold">17.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock">14</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order">2</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku">GRO-000-2331</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name">fish</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold">1321.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock">45</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order">1</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku">GRO-000-533</div>
</div>
% ./testxo pretty html xpath info
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name"
       data-xpath="/top/data/item/name" data-type="string"
       data-help="Name of the item">gum</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold"
       data-xpath="/top/data/item/sold" data-type="number"
       data-help="Number of items sold">1412.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock"
       data-xpath="/top/data/item/in-stock" data-type="number"
       data-help="Number of items in stock">54</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order"
       data-xpath="/top/data/item/on-order" data-type="number"
       data-help="Number of items on order">10</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku"
       data-xpath="/top/data/item/sku" data-type="string"
       data-help="Stock Keeping Unit">GRO-000-415</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name"
       data-xpath="/top/data/item/name" data-type="string"
       data-help="Name of the item">rope</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold"
       data-xpath="/top/data/item/sold" data-type="number"
       data-help="Number of items sold">85.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock"
       data-xpath="/top/data/item/in-stock" data-type="number"
       data-help="Number of items in stock">4</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order"
       data-xpath="/top/data/item/on-order" data-type="number"
       data-help="Number of items on order">2</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku"
       data-xpath="/top/data/item/sku" data-type="string"
       data-help="Stock Keeping Unit">HRD-000-212</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name"
       data-xpath="/top/data/item/name" data-type="string"
       data-help="Name of the item">ladder</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold"
       data-xpath="/top/data/item/sold" data-type="number"
       data-help="Number of items sold">0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock"
       data-xpath="/top/data/item/in-stock" data-type="number"
       data-help="Number of items in stock">2</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order"
       data-xpath="/top/data/item/on-order" data-type="number"
       data-help="Number of items on order">1</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku"
       data-xpath="/top/data/item/sku" data-type="string"
       data-help="Stock Keeping Unit">HRD-000-517</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name"
       data-xpath="/top/data/item/name" data-type="string"
       data-help="Name of the item">bolt</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold"
       data-xpath="/top/data/item/sold" data-type="number"
       data-help="Number of items sold">4123.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock"
       data-xpath="/top/data/item/in-stock" data-type="number"
       data-help="Number of items in stock">144</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order"
       data-xpath="/top/data/item/on-order" data-type="number"
       data-help="Number of items on order">42</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku"
       data-xpath="/top/data/item/sku" data-type="string"
       data-help="Stock Keeping Unit">HRD-000-632</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name"
       data-xpath="/top/data/item/name" data-type="string"
       data-help="Name of the item">water</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold"
       data-xpath="/top/data/item/sold" data-type="number"
       data-help="Number of items sold">17.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock"
       data-xpath="/top/data/item/in-stock" data-type="number"
       data-help="Number of items in stock">14</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order"
       data-xpath="/top/data/item/on-order" data-type="number"
       data-help="Number of items on order">2</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku"
       data-xpath="/top/data/item/sku" data-type="string"
       data-help="Stock Keeping Unit">GRO-000-2331</div>
</div>
<div class="line">
  <div class="label">Item</div>
  <div class="text"> '</div>
  <div class="data" data-tag="name"
       data-xpath="/top/data/item/name" data-type="string"
       data-help="Name of the item">fish</div>
  <div class="text">':</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">Total sold</div>
  <div class="text">: </div>
  <div class="data" data-tag="sold"
       data-xpath="/top/data/item/sold" data-type="number"
       data-help="Number of items sold">1321.0</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">In stock</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="in-stock"
       data-xpath="/top/data/item/in-stock" data-type="number"
       data-help="Number of items in stock">45</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">On order</div>
  <div class="decoration">:</div>
  <div class="padding"> </div>
  <div class="data" data-tag="on-order"
       data-xpath="/top/data/item/on-order" data-type="number"
       data-help="Number of items on order">1</div>
</div>
<div class="line">
  <div class="padding">   </div>
  <div class="label">SKU</div>
  <div class="text">: </div>
  <div class="data" data-tag="sku"
       data-xpath="/top/data/item/sku" data-type="string"
       data-help="Stock Keeping Unit">GRO-000-533</div>
</div>

{{document:
    name libxo-manual;
    private "The libxo Project";
    ipr none;
    category exp;
    abbreviation LIBXO-MANUAL;
    title "libxo: The Easy Way to Generate text, XML, JSON, and HTML output";
    contributor "author:Phil Shafer:Juniper Networks:phil@juniper.net";
}}
